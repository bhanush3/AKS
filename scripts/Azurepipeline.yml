# Docker
# Build and push images to Azure Container Registry and deploy to aks
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: $(dockerRegistryServiceConnection)
  containerRegistry: $(dockerRegistry)
  tag: '$(Build.BuildId)'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push frount-end image to container registry
      inputs:
        command: buildAndPush
        repository: 'front-end'
        dockerfile: '**/web/Dockerfile'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: Docker@2
      displayName: Build and push api image to container registry
      inputs:
        command: buildAndPush
        repository: 'api'
        dockerfile: '**/api/Dockerfile'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: Docker@2
      displayName: Build and push db image to container registry
      inputs:
        command: buildAndPush
        repository: 'db'
        dockerfile: '**/db/Dockerfile'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: CopyFiles@2
      inputs:
        contents: '**/application/*.yml'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'MyBuildOutputs'
        artifactName: 'MyBuildOutputs'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      vmImage: $(vmImageName)
    environment: 'develop.aksnamespace'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'MyBuildOutputs'
              downloadPath: '$(System.ArtifactsDirectory)/MyBuildOutputs'

          - task: Kubernetes@1
            displayName: kubectl apply for secretType dockerRegistry
            inputs:
              azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
              azureResourceGroup: $(azureResourceGroup)
              kubernetesCluster: $(kubernetesCluster)
              command: apply
              arguments: -f *.yaml
              secretType: dockerRegistry
              containerRegistryType: Azure Container Registry
              azureSubscriptionEndpointForSecrets: $(azureSubscriptionEndpoint)
              azureContainerRegistry: $(azureContainerRegistry)
              secretName: mysecretkey2
              forceUpdate: true        